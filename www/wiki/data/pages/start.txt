====== Main page for everything ======

This is a good news for creating the page.


### Some HTML

Hello world! This demonstrates [to-markdown](https://github.com/domchristie/to-markdown) â€“ an HTML to Markdown converter.

* * *

1.  Number 1
2.  Number Two

<code bash>

#!/bin/sh
# This is script is used for implementing a ssl tunnel via SSH. Forwarding remote port to local port 11945.
# Wirtten by Libo.Ma @ 2014.2.19 Wed Feb 19 22:59:38 CST 2014
# Draft version 1.0

curdir=$(cd `dirname $0`;pwd)
pidfile=$curdir/sshtunnl.pid
logfile=$curdir/sshtunnl.log

start () {

# Check pid 
#if [ -f $pidfile ] && ps aux |grep ssh |grep -q `cat $pidfile`
if [ -f $pidfile ] && pgrep -q -F $pidfile # updated on 2015.6.17
then
    echo "SSH tunnel is running."
    exit 0
else
    # Startup running proc
    #nohup ssh -N -L 11945:54.215.124.210:11945 ronniema@54.215.124.210 -i $HOME/.ssh/ronniema.pam >$logfile 2>&1 &
    nohup ssh -N -L 31288:127.0.0.1:31288 root@$server -i $HOME/.ssh/id_rsa >$logfile 2>&1 &
    if [ $? -eq 0 ];then
        echo "$!" >$pidfile
        echo "vpn tunnel is up"
    fi
fi

}

stop () {
    
    # Check pid
    
    # Check pidfile
    [ ! -f $pidfile ] && { echo "no running"; return 1; } || pid=`cat $pidfile`
    # Check running process of ssh tunnel
    if pgrep -q -F $pidfile # updated on 2015.6.17
    then
        kill -KILL $pid && { rm $pidfile; return 0; }
    else
        echo "ssh tunnel not running..."
        return 1
    fi

}

reload () {

    # Check pidfile
    [ ! -f $pidfile ] && { echo "no running"; exit 1; } || pid=`cat $pidfile`

    # Reload configuration...
    #if ps aux |grep ssh |grep -q $pid
    if pgrep -q -F $pidfile # updated on 2015.6.17
    then
        kill -HUP $pid && return 0
    else
        echo "ssh tunnel not running..."
        exit 1
    fi

}

status () {

    # Check pidfile
    [ ! -f $pidfile ] && { echo "no running"; exit 1; } || pid=`cat $pidfile`
    
    if pgrep -q -F $pidfile # updated on 2015.6.17
    then
        echo "Tunnel is running with pid $pid"
    else
        echo "Tunnel service NOT running"
        return 1
    fi
}

help() {
        
    echo "Usage :sh `basename $0 ` [start|stop|status|reload|restart]"
    exit 1

}


# Check user input argv

[ -z $1 ] && help

server=$2

case "$1" in
    start)
        start $2
        ;;
    restart)
        stop;
        sleep 1
        start
        ;;
    stop)
        stop && echo "stopped."
        ;;
    status)
        status
        ;;
    reload)
        reload && echo "reload OK."
        ;;
    *)
        help
        ;;
esac

</code>